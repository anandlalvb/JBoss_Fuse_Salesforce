/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject AppMenuItem
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("AppMenuItem")
public class AppMenuItem extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // SortOrder
    private Integer SortOrder;

    @JsonProperty("SortOrder")
    public Integer getSortOrder() {
        return this.SortOrder;
    }

    @JsonProperty("SortOrder")
    public void setSortOrder(Integer SortOrder) {
        this.SortOrder = SortOrder;
    }

    // NamespacePrefix
    private String NamespacePrefix;

    @JsonProperty("NamespacePrefix")
    public String getNamespacePrefix() {
        return this.NamespacePrefix;
    }

    @JsonProperty("NamespacePrefix")
    public void setNamespacePrefix(String NamespacePrefix) {
        this.NamespacePrefix = NamespacePrefix;
    }

    // Label
    private String Label;

    @JsonProperty("Label")
    public String getLabel() {
        return this.Label;
    }

    @JsonProperty("Label")
    public void setLabel(String Label) {
        this.Label = Label;
    }

    // Description
    private String Description;

    @JsonProperty("Description")
    public String getDescription() {
        return this.Description;
    }

    @JsonProperty("Description")
    public void setDescription(String Description) {
        this.Description = Description;
    }

    // StartUrl
    private String StartUrl;

    @JsonProperty("StartUrl")
    public String getStartUrl() {
        return this.StartUrl;
    }

    @JsonProperty("StartUrl")
    public void setStartUrl(String StartUrl) {
        this.StartUrl = StartUrl;
    }

    // MobileStartUrl
    private String MobileStartUrl;

    @JsonProperty("MobileStartUrl")
    public String getMobileStartUrl() {
        return this.MobileStartUrl;
    }

    @JsonProperty("MobileStartUrl")
    public void setMobileStartUrl(String MobileStartUrl) {
        this.MobileStartUrl = MobileStartUrl;
    }

    // LogoUrl
    private String LogoUrl;

    @JsonProperty("LogoUrl")
    public String getLogoUrl() {
        return this.LogoUrl;
    }

    @JsonProperty("LogoUrl")
    public void setLogoUrl(String LogoUrl) {
        this.LogoUrl = LogoUrl;
    }

    // IconUrl
    private String IconUrl;

    @JsonProperty("IconUrl")
    public String getIconUrl() {
        return this.IconUrl;
    }

    @JsonProperty("IconUrl")
    public void setIconUrl(String IconUrl) {
        this.IconUrl = IconUrl;
    }

    // InfoUrl
    private String InfoUrl;

    @JsonProperty("InfoUrl")
    public String getInfoUrl() {
        return this.InfoUrl;
    }

    @JsonProperty("InfoUrl")
    public void setInfoUrl(String InfoUrl) {
        this.InfoUrl = InfoUrl;
    }

    // IsUsingAdminAuthorization
    private Boolean IsUsingAdminAuthorization;

    @JsonProperty("IsUsingAdminAuthorization")
    public Boolean getIsUsingAdminAuthorization() {
        return this.IsUsingAdminAuthorization;
    }

    @JsonProperty("IsUsingAdminAuthorization")
    public void setIsUsingAdminAuthorization(Boolean IsUsingAdminAuthorization) {
        this.IsUsingAdminAuthorization = IsUsingAdminAuthorization;
    }

    // MobilePlatform
    @XStreamConverter(PicklistEnumConverter.class)
    private AppMenuItem_MobilePlatformEnum MobilePlatform;

    @JsonProperty("MobilePlatform")
    public AppMenuItem_MobilePlatformEnum getMobilePlatform() {
        return this.MobilePlatform;
    }

    @JsonProperty("MobilePlatform")
    public void setMobilePlatform(AppMenuItem_MobilePlatformEnum MobilePlatform) {
        this.MobilePlatform = MobilePlatform;
    }

    // MobileMinOsVer
    private String MobileMinOsVer;

    @JsonProperty("MobileMinOsVer")
    public String getMobileMinOsVer() {
        return this.MobileMinOsVer;
    }

    @JsonProperty("MobileMinOsVer")
    public void setMobileMinOsVer(String MobileMinOsVer) {
        this.MobileMinOsVer = MobileMinOsVer;
    }

    // MobileDeviceType
    private String MobileDeviceType;

    @JsonProperty("MobileDeviceType")
    public String getMobileDeviceType() {
        return this.MobileDeviceType;
    }

    @JsonProperty("MobileDeviceType")
    public void setMobileDeviceType(String MobileDeviceType) {
        this.MobileDeviceType = MobileDeviceType;
    }

    // IsRegisteredDeviceOnly
    private Boolean IsRegisteredDeviceOnly;

    @JsonProperty("IsRegisteredDeviceOnly")
    public Boolean getIsRegisteredDeviceOnly() {
        return this.IsRegisteredDeviceOnly;
    }

    @JsonProperty("IsRegisteredDeviceOnly")
    public void setIsRegisteredDeviceOnly(Boolean IsRegisteredDeviceOnly) {
        this.IsRegisteredDeviceOnly = IsRegisteredDeviceOnly;
    }

    // MobileAppVer
    private String MobileAppVer;

    @JsonProperty("MobileAppVer")
    public String getMobileAppVer() {
        return this.MobileAppVer;
    }

    @JsonProperty("MobileAppVer")
    public void setMobileAppVer(String MobileAppVer) {
        this.MobileAppVer = MobileAppVer;
    }

    // MobileAppInstalledDate
    private java.time.ZonedDateTime MobileAppInstalledDate;

    @JsonProperty("MobileAppInstalledDate")
    public java.time.ZonedDateTime getMobileAppInstalledDate() {
        return this.MobileAppInstalledDate;
    }

    @JsonProperty("MobileAppInstalledDate")
    public void setMobileAppInstalledDate(java.time.ZonedDateTime MobileAppInstalledDate) {
        this.MobileAppInstalledDate = MobileAppInstalledDate;
    }

    // MobileAppInstalledVersion
    private String MobileAppInstalledVersion;

    @JsonProperty("MobileAppInstalledVersion")
    public String getMobileAppInstalledVersion() {
        return this.MobileAppInstalledVersion;
    }

    @JsonProperty("MobileAppInstalledVersion")
    public void setMobileAppInstalledVersion(String MobileAppInstalledVersion) {
        this.MobileAppInstalledVersion = MobileAppInstalledVersion;
    }

    // MobileAppBinaryId
    private String MobileAppBinaryId;

    @JsonProperty("MobileAppBinaryId")
    public String getMobileAppBinaryId() {
        return this.MobileAppBinaryId;
    }

    @JsonProperty("MobileAppBinaryId")
    public void setMobileAppBinaryId(String MobileAppBinaryId) {
        this.MobileAppBinaryId = MobileAppBinaryId;
    }

    // MobileAppInstallUrl
    private String MobileAppInstallUrl;

    @JsonProperty("MobileAppInstallUrl")
    public String getMobileAppInstallUrl() {
        return this.MobileAppInstallUrl;
    }

    @JsonProperty("MobileAppInstallUrl")
    public void setMobileAppInstallUrl(String MobileAppInstallUrl) {
        this.MobileAppInstallUrl = MobileAppInstallUrl;
    }

    // CanvasEnabled
    private Boolean CanvasEnabled;

    @JsonProperty("CanvasEnabled")
    public Boolean getCanvasEnabled() {
        return this.CanvasEnabled;
    }

    @JsonProperty("CanvasEnabled")
    public void setCanvasEnabled(Boolean CanvasEnabled) {
        this.CanvasEnabled = CanvasEnabled;
    }

    // CanvasReferenceId
    private String CanvasReferenceId;

    @JsonProperty("CanvasReferenceId")
    public String getCanvasReferenceId() {
        return this.CanvasReferenceId;
    }

    @JsonProperty("CanvasReferenceId")
    public void setCanvasReferenceId(String CanvasReferenceId) {
        this.CanvasReferenceId = CanvasReferenceId;
    }

    // CanvasUrl
    private String CanvasUrl;

    @JsonProperty("CanvasUrl")
    public String getCanvasUrl() {
        return this.CanvasUrl;
    }

    @JsonProperty("CanvasUrl")
    public void setCanvasUrl(String CanvasUrl) {
        this.CanvasUrl = CanvasUrl;
    }

    // CanvasAccessMethod
    @XStreamConverter(PicklistEnumConverter.class)
    private AppMenuItem_CanvasAccessMethodEnum CanvasAccessMethod;

    @JsonProperty("CanvasAccessMethod")
    public AppMenuItem_CanvasAccessMethodEnum getCanvasAccessMethod() {
        return this.CanvasAccessMethod;
    }

    @JsonProperty("CanvasAccessMethod")
    public void setCanvasAccessMethod(AppMenuItem_CanvasAccessMethodEnum CanvasAccessMethod) {
        this.CanvasAccessMethod = CanvasAccessMethod;
    }

    // CanvasSelectedLocations
    private String CanvasSelectedLocations;

    @JsonProperty("CanvasSelectedLocations")
    public String getCanvasSelectedLocations() {
        return this.CanvasSelectedLocations;
    }

    @JsonProperty("CanvasSelectedLocations")
    public void setCanvasSelectedLocations(String CanvasSelectedLocations) {
        this.CanvasSelectedLocations = CanvasSelectedLocations;
    }

    // CanvasOptions
    private String CanvasOptions;

    @JsonProperty("CanvasOptions")
    public String getCanvasOptions() {
        return this.CanvasOptions;
    }

    @JsonProperty("CanvasOptions")
    public void setCanvasOptions(String CanvasOptions) {
        this.CanvasOptions = CanvasOptions;
    }

    // Type
    @XStreamConverter(PicklistEnumConverter.class)
    private AppMenuItem_TypeEnum Type;

    @JsonProperty("Type")
    public AppMenuItem_TypeEnum getType() {
        return this.Type;
    }

    @JsonProperty("Type")
    public void setType(AppMenuItem_TypeEnum Type) {
        this.Type = Type;
    }

    // ApplicationId
    private String ApplicationId;

    @JsonProperty("ApplicationId")
    public String getApplicationId() {
        return this.ApplicationId;
    }

    @JsonProperty("ApplicationId")
    public void setApplicationId(String ApplicationId) {
        this.ApplicationId = ApplicationId;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "AppMenuItem ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("SortOrder", "Sort Order", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("Name", "Developer Name", "string", "xsd:string", 80, false, true, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("NamespacePrefix", "Namespace Prefix", "string", "xsd:string", 80, false, true, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("Label", "Label", "string", "xsd:string", 250, false, true, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("Description", "Description", "string", "xsd:string", 250, false, true, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("StartUrl", "Start Url", "url", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("MobileStartUrl", "Mobile Start Url", "url", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("LogoUrl", "Logo Image URL", "url", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField15);
        final SObjectField sObjectField16 = createField("IconUrl", "Icon Url", "url", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField16);
        final SObjectField sObjectField17 = createField("InfoUrl", "Info URL", "url", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField17);
        final SObjectField sObjectField18 = createField("IsUsingAdminAuthorization", "IsUsingAdminAuthorization", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField18);
        final SObjectField sObjectField19 = createField("MobilePlatform", "Mobile device OS platform", "picklist", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField19);
        final SObjectField sObjectField20 = createField("MobileMinOsVer", "Minimum required mobile device OS version", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField20);
        final SObjectField sObjectField21 = createField("MobileDeviceType", "Type of mobile device", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField21);
        final SObjectField sObjectField22 = createField("IsRegisteredDeviceOnly", "App requires a registered mobile device", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField22);
        final SObjectField sObjectField23 = createField("MobileAppVer", "Version of the mobile app", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField23);
        final SObjectField sObjectField24 = createField("MobileAppInstalledDate", "Date the mobile app was most recently installed", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField24);
        final SObjectField sObjectField25 = createField("MobileAppInstalledVersion", "Most recently installed version of the mobile app", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField25);
        final SObjectField sObjectField26 = createField("MobileAppBinaryId", "ID for the related mobile app binary", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField26);
        final SObjectField sObjectField27 = createField("MobileAppInstallUrl", "URL to install the mobile app", "url", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField27);
        final SObjectField sObjectField28 = createField("CanvasEnabled", "Is this a canvas-enabled application", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField28);
        final SObjectField sObjectField29 = createField("CanvasReferenceId", "The identifier used to render the canvas application.", "string", "xsd:string", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField29);
        final SObjectField sObjectField30 = createField("CanvasUrl", "The canvas url for the canvas application", "url", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField30);
        final SObjectField sObjectField31 = createField("CanvasAccessMethod", "The configured access method for the canvas application", "picklist", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField31);
        final SObjectField sObjectField32 = createField("CanvasSelectedLocations", "The selected/supported locations of the canvas application", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField32);
        final SObjectField sObjectField33 = createField("CanvasOptions", "The options to hide publisher header or publisher share button", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField33);
        final SObjectField sObjectField34 = createField("Type", "App Type", "picklist", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField34);
        final SObjectField sObjectField35 = createField("ApplicationId", "Application ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField35);

        description.setLabelPlural("AppMenuItems");
        description.setLabel("AppMenuItem");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/AppMenuItem/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/AppMenuItem");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/AppMenuItem/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("AppMenuItem");

        return description;
    }
}
