/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject EventLogFile
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("EventLogFile")
public class EventLogFile extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // EventType
    @XStreamConverter(PicklistEnumConverter.class)
    private EventLogFile_EventTypeEnum EventType;

    @JsonProperty("EventType")
    public EventLogFile_EventTypeEnum getEventType() {
        return this.EventType;
    }

    @JsonProperty("EventType")
    public void setEventType(EventLogFile_EventTypeEnum EventType) {
        this.EventType = EventType;
    }

    // LogDate
    private java.time.ZonedDateTime LogDate;

    @JsonProperty("LogDate")
    public java.time.ZonedDateTime getLogDate() {
        return this.LogDate;
    }

    @JsonProperty("LogDate")
    public void setLogDate(java.time.ZonedDateTime LogDate) {
        this.LogDate = LogDate;
    }

    // LogFileLength
    private Double LogFileLength;

    @JsonProperty("LogFileLength")
    public Double getLogFileLength() {
        return this.LogFileLength;
    }

    @JsonProperty("LogFileLength")
    public void setLogFileLength(Double LogFileLength) {
        this.LogFileLength = LogFileLength;
    }

    // LogFileContentType
    private String LogFileContentType;

    @JsonProperty("LogFileContentType")
    public String getLogFileContentType() {
        return this.LogFileContentType;
    }

    @JsonProperty("LogFileContentType")
    public void setLogFileContentType(String LogFileContentType) {
        this.LogFileContentType = LogFileContentType;
    }

    // ApiVersion
    private Double ApiVersion;

    @JsonProperty("ApiVersion")
    public Double getApiVersion() {
        return this.ApiVersion;
    }

    @JsonProperty("ApiVersion")
    public void setApiVersion(Double ApiVersion) {
        this.ApiVersion = ApiVersion;
    }

    // LogFileFieldNames
    private String LogFileFieldNames;

    @JsonProperty("LogFileFieldNames")
    public String getLogFileFieldNames() {
        return this.LogFileFieldNames;
    }

    @JsonProperty("LogFileFieldNames")
    public void setLogFileFieldNames(String LogFileFieldNames) {
        this.LogFileFieldNames = LogFileFieldNames;
    }

    // LogFileFieldTypes
    private String LogFileFieldTypes;

    @JsonProperty("LogFileFieldTypes")
    public String getLogFileFieldTypes() {
        return this.LogFileFieldTypes;
    }

    @JsonProperty("LogFileFieldTypes")
    public void setLogFileFieldTypes(String LogFileFieldTypes) {
        this.LogFileFieldTypes = LogFileFieldTypes;
    }

    // LogFile
    // blob field url, use getBlobField to get the content
    @XStreamAlias("LogFile")
    private String LogFileUrl;

    @JsonProperty("LogFile")
    public String getLogFileUrl() {
        return this.LogFileUrl;
    }

    @JsonProperty("LogFile")
    public void setLogFileUrl(String LogFileUrl) {
        this.LogFileUrl = LogFileUrl;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Event Log File ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("EventType", "Event Type", "picklist", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("LogDate", "Log Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("LogFileLength", "Log File Length", "double", "xsd:double", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("LogFileContentType", "Log File Content Type", "string", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("ApiVersion", "API Version", "double", "xsd:double", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("LogFileFieldNames", "Log File Field Names", "string", "xsd:string", 1333, false, true, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("LogFileFieldTypes", "Log File Field Types", "string", "xsd:string", 1333, false, true, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("LogFile", "Log File", "base64", "xsd:base64Binary", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField15);

        description.setLabelPlural("Event Log Files");
        description.setLabel("Event Log File");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/EventLogFile/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/EventLogFile");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/EventLogFile/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("EventLogFile");

        return description;
    }
}
