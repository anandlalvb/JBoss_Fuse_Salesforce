/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.MultiSelectPicklistConverter;
import org.apache.camel.component.salesforce.api.MultiSelectPicklistDeserializer;
import org.apache.camel.component.salesforce.api.MultiSelectPicklistSerializer;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Salesforce DTO for SObject Idea
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("Idea")
public class Idea extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // Title
    private String Title;

    @JsonProperty("Title")
    public String getTitle() {
        return this.Title;
    }

    @JsonProperty("Title")
    public void setTitle(String Title) {
        this.Title = Title;
    }

    // RecordTypeId
    private String RecordTypeId;

    @JsonProperty("RecordTypeId")
    public String getRecordTypeId() {
        return this.RecordTypeId;
    }

    @JsonProperty("RecordTypeId")
    public void setRecordTypeId(String RecordTypeId) {
        this.RecordTypeId = RecordTypeId;
    }

    // CommunityId
    private String CommunityId;

    @JsonProperty("CommunityId")
    public String getCommunityId() {
        return this.CommunityId;
    }

    @JsonProperty("CommunityId")
    public void setCommunityId(String CommunityId) {
        this.CommunityId = CommunityId;
    }

    // Body
    private String Body;

    @JsonProperty("Body")
    public String getBody() {
        return this.Body;
    }

    @JsonProperty("Body")
    public void setBody(String Body) {
        this.Body = Body;
    }

    // NumComments
    private Integer NumComments;

    @JsonProperty("NumComments")
    public Integer getNumComments() {
        return this.NumComments;
    }

    @JsonProperty("NumComments")
    public void setNumComments(Integer NumComments) {
        this.NumComments = NumComments;
    }

    // VoteScore
    private Double VoteScore;

    @JsonProperty("VoteScore")
    public Double getVoteScore() {
        return this.VoteScore;
    }

    @JsonProperty("VoteScore")
    public void setVoteScore(Double VoteScore) {
        this.VoteScore = VoteScore;
    }

    // VoteTotal
    private Double VoteTotal;

    @JsonProperty("VoteTotal")
    public Double getVoteTotal() {
        return this.VoteTotal;
    }

    @JsonProperty("VoteTotal")
    public void setVoteTotal(Double VoteTotal) {
        this.VoteTotal = VoteTotal;
    }

    // Categories
    @XStreamConverter(MultiSelectPicklistConverter.class)
    private Idea_CategoriesEnum[] Categories;

    @JsonProperty("Categories")
    @JsonSerialize(using = MultiSelectPicklistSerializer.class)
    @JsonInclude(value = Include.ALWAYS)
    public Idea_CategoriesEnum[] getCategories() {
        return this.Categories;
    }

    @JsonProperty("Categories")
    @JsonDeserialize(using = MultiSelectPicklistDeserializer.class)
    public void setCategories(Idea_CategoriesEnum[] Categories) {
        this.Categories = Categories;
    }

    // Status
    @XStreamConverter(PicklistEnumConverter.class)
    private Idea_StatusEnum Status;

    @JsonProperty("Status")
    public Idea_StatusEnum getStatus() {
        return this.Status;
    }

    @JsonProperty("Status")
    public void setStatus(Idea_StatusEnum Status) {
        this.Status = Status;
    }

    // LastCommentDate
    private java.time.ZonedDateTime LastCommentDate;

    @JsonProperty("LastCommentDate")
    public java.time.ZonedDateTime getLastCommentDate() {
        return this.LastCommentDate;
    }

    @JsonProperty("LastCommentDate")
    public void setLastCommentDate(java.time.ZonedDateTime LastCommentDate) {
        this.LastCommentDate = LastCommentDate;
    }

    // LastCommentId
    private String LastCommentId;

    @JsonProperty("LastCommentId")
    public String getLastCommentId() {
        return this.LastCommentId;
    }

    @JsonProperty("LastCommentId")
    public void setLastCommentId(String LastCommentId) {
        this.LastCommentId = LastCommentId;
    }

    // ParentIdeaId
    private String ParentIdeaId;

    @JsonProperty("ParentIdeaId")
    public String getParentIdeaId() {
        return this.ParentIdeaId;
    }

    @JsonProperty("ParentIdeaId")
    public void setParentIdeaId(String ParentIdeaId) {
        this.ParentIdeaId = ParentIdeaId;
    }

    // IsHtml
    private Boolean IsHtml;

    @JsonProperty("IsHtml")
    public Boolean getIsHtml() {
        return this.IsHtml;
    }

    @JsonProperty("IsHtml")
    public void setIsHtml(Boolean IsHtml) {
        this.IsHtml = IsHtml;
    }

    // IsMerged
    private Boolean IsMerged;

    @JsonProperty("IsMerged")
    public Boolean getIsMerged() {
        return this.IsMerged;
    }

    @JsonProperty("IsMerged")
    public void setIsMerged(Boolean IsMerged) {
        this.IsMerged = IsMerged;
    }

    // CreatorFullPhotoUrl
    private String CreatorFullPhotoUrl;

    @JsonProperty("CreatorFullPhotoUrl")
    public String getCreatorFullPhotoUrl() {
        return this.CreatorFullPhotoUrl;
    }

    @JsonProperty("CreatorFullPhotoUrl")
    public void setCreatorFullPhotoUrl(String CreatorFullPhotoUrl) {
        this.CreatorFullPhotoUrl = CreatorFullPhotoUrl;
    }

    // CreatorSmallPhotoUrl
    private String CreatorSmallPhotoUrl;

    @JsonProperty("CreatorSmallPhotoUrl")
    public String getCreatorSmallPhotoUrl() {
        return this.CreatorSmallPhotoUrl;
    }

    @JsonProperty("CreatorSmallPhotoUrl")
    public void setCreatorSmallPhotoUrl(String CreatorSmallPhotoUrl) {
        this.CreatorSmallPhotoUrl = CreatorSmallPhotoUrl;
    }

    // CreatorName
    private String CreatorName;

    @JsonProperty("CreatorName")
    public String getCreatorName() {
        return this.CreatorName;
    }

    @JsonProperty("CreatorName")
    public void setCreatorName(String CreatorName) {
        this.CreatorName = CreatorName;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Idea ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("Title", "Title", "string", "xsd:string", 255, false, false, true, false, false, false, true);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("RecordTypeId", "Record Type ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("LastViewedDate", "Last Viewed Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("LastReferencedDate", "Last Referenced Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("CommunityId", "Zone ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("Body", "Idea Body", "textarea", "xsd:string", 32000, false, true, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("NumComments", "Number of Comments", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("VoteScore", "Vote Score", "double", "xsd:double", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField15);
        final SObjectField sObjectField16 = createField("VoteTotal", "Vote Total", "double", "xsd:double", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField16);
        final SObjectField sObjectField17 = createField("Categories", "Categories", "multipicklist", "xsd:string", 4099, false, true, false, false, false, false, false);
        fields1.add(sObjectField17);
        final SObjectField sObjectField18 = createField("Status", "Status", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField18);
        final SObjectField sObjectField19 = createField("LastCommentDate", "Last Idea Comment Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField19);
        final SObjectField sObjectField20 = createField("LastCommentId", "Idea Comment ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField20);
        final SObjectField sObjectField21 = createField("ParentIdeaId", "Idea ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField21);
        final SObjectField sObjectField22 = createField("IsHtml", "IsHtml", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField22);
        final SObjectField sObjectField23 = createField("IsMerged", "Is Merged", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField23);
        final SObjectField sObjectField24 = createField("CreatorFullPhotoUrl", "Url of Creator's Profile Photo", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField24);
        final SObjectField sObjectField25 = createField("CreatorSmallPhotoUrl", "Url of Creator's Thumbnail Photo", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField25);
        final SObjectField sObjectField26 = createField("CreatorName", "Name of Creator", "string", "xsd:string", 121, false, true, false, false, false, false, false);
        fields1.add(sObjectField26);

        description.setLabelPlural("Ideas");
        description.setLabel("Idea");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/Idea/describe");
        sObjectDescriptionUrls1.setLayouts("/services/data/v34.0/sobjects/Idea/describe/layouts");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/Idea");
        sObjectDescriptionUrls1.setUiEditTemplate("https://na57.salesforce.com/{ID}/e");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/Idea/{ID}");
        sObjectDescriptionUrls1.setCompactLayouts("/services/data/v34.0/sobjects/Idea/describe/compactLayouts");
        sObjectDescriptionUrls1.setUiNewRecord("https://na57.salesforce.com/087/e");
        sObjectDescriptionUrls1.setUiDetailTemplate("https://na57.salesforce.com/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("Idea");

        return description;
    }
}
