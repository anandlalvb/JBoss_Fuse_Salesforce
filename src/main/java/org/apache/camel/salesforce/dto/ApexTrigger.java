/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject ApexTrigger
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("ApexTrigger")
public class ApexTrigger extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // NamespacePrefix
    private String NamespacePrefix;

    @JsonProperty("NamespacePrefix")
    public String getNamespacePrefix() {
        return this.NamespacePrefix;
    }

    @JsonProperty("NamespacePrefix")
    public void setNamespacePrefix(String NamespacePrefix) {
        this.NamespacePrefix = NamespacePrefix;
    }

    // TableEnumOrId
    @XStreamConverter(PicklistEnumConverter.class)
    private ApexTrigger_TableEnumOrIdEnum TableEnumOrId;

    @JsonProperty("TableEnumOrId")
    public ApexTrigger_TableEnumOrIdEnum getTableEnumOrId() {
        return this.TableEnumOrId;
    }

    @JsonProperty("TableEnumOrId")
    public void setTableEnumOrId(ApexTrigger_TableEnumOrIdEnum TableEnumOrId) {
        this.TableEnumOrId = TableEnumOrId;
    }

    // UsageBeforeInsert
    private Boolean UsageBeforeInsert;

    @JsonProperty("UsageBeforeInsert")
    public Boolean getUsageBeforeInsert() {
        return this.UsageBeforeInsert;
    }

    @JsonProperty("UsageBeforeInsert")
    public void setUsageBeforeInsert(Boolean UsageBeforeInsert) {
        this.UsageBeforeInsert = UsageBeforeInsert;
    }

    // UsageAfterInsert
    private Boolean UsageAfterInsert;

    @JsonProperty("UsageAfterInsert")
    public Boolean getUsageAfterInsert() {
        return this.UsageAfterInsert;
    }

    @JsonProperty("UsageAfterInsert")
    public void setUsageAfterInsert(Boolean UsageAfterInsert) {
        this.UsageAfterInsert = UsageAfterInsert;
    }

    // UsageBeforeUpdate
    private Boolean UsageBeforeUpdate;

    @JsonProperty("UsageBeforeUpdate")
    public Boolean getUsageBeforeUpdate() {
        return this.UsageBeforeUpdate;
    }

    @JsonProperty("UsageBeforeUpdate")
    public void setUsageBeforeUpdate(Boolean UsageBeforeUpdate) {
        this.UsageBeforeUpdate = UsageBeforeUpdate;
    }

    // UsageAfterUpdate
    private Boolean UsageAfterUpdate;

    @JsonProperty("UsageAfterUpdate")
    public Boolean getUsageAfterUpdate() {
        return this.UsageAfterUpdate;
    }

    @JsonProperty("UsageAfterUpdate")
    public void setUsageAfterUpdate(Boolean UsageAfterUpdate) {
        this.UsageAfterUpdate = UsageAfterUpdate;
    }

    // UsageBeforeDelete
    private Boolean UsageBeforeDelete;

    @JsonProperty("UsageBeforeDelete")
    public Boolean getUsageBeforeDelete() {
        return this.UsageBeforeDelete;
    }

    @JsonProperty("UsageBeforeDelete")
    public void setUsageBeforeDelete(Boolean UsageBeforeDelete) {
        this.UsageBeforeDelete = UsageBeforeDelete;
    }

    // UsageAfterDelete
    private Boolean UsageAfterDelete;

    @JsonProperty("UsageAfterDelete")
    public Boolean getUsageAfterDelete() {
        return this.UsageAfterDelete;
    }

    @JsonProperty("UsageAfterDelete")
    public void setUsageAfterDelete(Boolean UsageAfterDelete) {
        this.UsageAfterDelete = UsageAfterDelete;
    }

    // UsageIsBulk
    private Boolean UsageIsBulk;

    @JsonProperty("UsageIsBulk")
    public Boolean getUsageIsBulk() {
        return this.UsageIsBulk;
    }

    @JsonProperty("UsageIsBulk")
    public void setUsageIsBulk(Boolean UsageIsBulk) {
        this.UsageIsBulk = UsageIsBulk;
    }

    // UsageAfterUndelete
    private Boolean UsageAfterUndelete;

    @JsonProperty("UsageAfterUndelete")
    public Boolean getUsageAfterUndelete() {
        return this.UsageAfterUndelete;
    }

    @JsonProperty("UsageAfterUndelete")
    public void setUsageAfterUndelete(Boolean UsageAfterUndelete) {
        this.UsageAfterUndelete = UsageAfterUndelete;
    }

    // ApiVersion
    private Double ApiVersion;

    @JsonProperty("ApiVersion")
    public Double getApiVersion() {
        return this.ApiVersion;
    }

    @JsonProperty("ApiVersion")
    public void setApiVersion(Double ApiVersion) {
        this.ApiVersion = ApiVersion;
    }

    // Status
    @XStreamConverter(PicklistEnumConverter.class)
    private ApexTrigger_StatusEnum Status;

    @JsonProperty("Status")
    public ApexTrigger_StatusEnum getStatus() {
        return this.Status;
    }

    @JsonProperty("Status")
    public void setStatus(ApexTrigger_StatusEnum Status) {
        this.Status = Status;
    }

    // IsValid
    private Boolean IsValid;

    @JsonProperty("IsValid")
    public Boolean getIsValid() {
        return this.IsValid;
    }

    @JsonProperty("IsValid")
    public void setIsValid(Boolean IsValid) {
        this.IsValid = IsValid;
    }

    // BodyCrc
    private Double BodyCrc;

    @JsonProperty("BodyCrc")
    public Double getBodyCrc() {
        return this.BodyCrc;
    }

    @JsonProperty("BodyCrc")
    public void setBodyCrc(Double BodyCrc) {
        this.BodyCrc = BodyCrc;
    }

    // Body
    private String Body;

    @JsonProperty("Body")
    public String getBody() {
        return this.Body;
    }

    @JsonProperty("Body")
    public void setBody(String Body) {
        this.Body = Body;
    }

    // LengthWithoutComments
    private Integer LengthWithoutComments;

    @JsonProperty("LengthWithoutComments")
    public Integer getLengthWithoutComments() {
        return this.LengthWithoutComments;
    }

    @JsonProperty("LengthWithoutComments")
    public void setLengthWithoutComments(Integer LengthWithoutComments) {
        this.LengthWithoutComments = LengthWithoutComments;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Trigger ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("NamespacePrefix", "Namespace Prefix", "string", "xsd:string", 15, false, true, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("Name", "Name", "string", "xsd:string", 255, false, false, true, false, false, false, true);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("TableEnumOrId", "Custom Object Definition ID", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("UsageBeforeInsert", "BeforeInsert", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("UsageAfterInsert", "AfterInsert", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("UsageBeforeUpdate", "BeforeUpdate", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("UsageAfterUpdate", "AfterUpdate", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("UsageBeforeDelete", "BeforeDelete", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("UsageAfterDelete", "AfterDelete", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("UsageIsBulk", "IsBulk", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("UsageAfterUndelete", "AfterUndelete", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("ApiVersion", "Api Version", "double", "xsd:double", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("Status", "Status", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("IsValid", "Is Valid", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField15);
        final SObjectField sObjectField16 = createField("BodyCrc", "Body CRC", "double", "xsd:double", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField16);
        final SObjectField sObjectField17 = createField("Body", "Body", "textarea", "xsd:string", 1000000, false, true, false, false, false, false, false);
        fields1.add(sObjectField17);
        final SObjectField sObjectField18 = createField("LengthWithoutComments", "Size Without Comments", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField18);
        final SObjectField sObjectField19 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField19);
        final SObjectField sObjectField20 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField20);
        final SObjectField sObjectField21 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField21);
        final SObjectField sObjectField22 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField22);
        final SObjectField sObjectField23 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField23);

        description.setLabelPlural("Apex Triggers");
        description.setLabel("Apex Trigger");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/ApexTrigger/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/ApexTrigger");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/ApexTrigger/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("ApexTrigger");

        return description;
    }
}
