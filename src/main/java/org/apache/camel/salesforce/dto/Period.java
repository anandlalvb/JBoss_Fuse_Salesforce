/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject Period
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("Period")
public class Period extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // FiscalYearSettingsId
    private String FiscalYearSettingsId;

    @JsonProperty("FiscalYearSettingsId")
    public String getFiscalYearSettingsId() {
        return this.FiscalYearSettingsId;
    }

    @JsonProperty("FiscalYearSettingsId")
    public void setFiscalYearSettingsId(String FiscalYearSettingsId) {
        this.FiscalYearSettingsId = FiscalYearSettingsId;
    }

    // Type
    @XStreamConverter(PicklistEnumConverter.class)
    private Period_TypeEnum Type;

    @JsonProperty("Type")
    public Period_TypeEnum getType() {
        return this.Type;
    }

    @JsonProperty("Type")
    public void setType(Period_TypeEnum Type) {
        this.Type = Type;
    }

    // StartDate
    private java.time.LocalDate StartDate;

    @JsonProperty("StartDate")
    public java.time.LocalDate getStartDate() {
        return this.StartDate;
    }

    @JsonProperty("StartDate")
    public void setStartDate(java.time.LocalDate StartDate) {
        this.StartDate = StartDate;
    }

    // EndDate
    private java.time.LocalDate EndDate;

    @JsonProperty("EndDate")
    public java.time.LocalDate getEndDate() {
        return this.EndDate;
    }

    @JsonProperty("EndDate")
    public void setEndDate(java.time.LocalDate EndDate) {
        this.EndDate = EndDate;
    }

    // IsForecastPeriod
    private Boolean IsForecastPeriod;

    @JsonProperty("IsForecastPeriod")
    public Boolean getIsForecastPeriod() {
        return this.IsForecastPeriod;
    }

    @JsonProperty("IsForecastPeriod")
    public void setIsForecastPeriod(Boolean IsForecastPeriod) {
        this.IsForecastPeriod = IsForecastPeriod;
    }

    // QuarterLabel
    @XStreamConverter(PicklistEnumConverter.class)
    private Period_QuarterLabelEnum QuarterLabel;

    @JsonProperty("QuarterLabel")
    public Period_QuarterLabelEnum getQuarterLabel() {
        return this.QuarterLabel;
    }

    @JsonProperty("QuarterLabel")
    public void setQuarterLabel(Period_QuarterLabelEnum QuarterLabel) {
        this.QuarterLabel = QuarterLabel;
    }

    // PeriodLabel
    @XStreamConverter(PicklistEnumConverter.class)
    private Period_PeriodLabelEnum PeriodLabel;

    @JsonProperty("PeriodLabel")
    public Period_PeriodLabelEnum getPeriodLabel() {
        return this.PeriodLabel;
    }

    @JsonProperty("PeriodLabel")
    public void setPeriodLabel(Period_PeriodLabelEnum PeriodLabel) {
        this.PeriodLabel = PeriodLabel;
    }

    // Number
    private Integer Number;

    @JsonProperty("Number")
    public Integer getNumber() {
        return this.Number;
    }

    @JsonProperty("Number")
    public void setNumber(Integer Number) {
        this.Number = Number;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Period ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("FiscalYearSettingsId", "Fiscal Year Settings ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("Type", "Type", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("StartDate", "Start Date", "date", "xsd:date", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("EndDate", "End Date", "date", "xsd:date", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("IsForecastPeriod", "Is Forecast Period", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("QuarterLabel", "Quarter Name", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("PeriodLabel", "Period Name", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("Number", "Number", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField10);

        description.setLabelPlural("Period");
        description.setLabel("Period");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/Period/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/Period");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/Period/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("Period");

        return description;
    }
}
