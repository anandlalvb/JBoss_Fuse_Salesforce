/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject Dashboard
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("Dashboard")
public class Dashboard extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // FolderId
    private String FolderId;

    @JsonProperty("FolderId")
    public String getFolderId() {
        return this.FolderId;
    }

    @JsonProperty("FolderId")
    public void setFolderId(String FolderId) {
        this.FolderId = FolderId;
    }

    // Title
    private String Title;

    @JsonProperty("Title")
    public String getTitle() {
        return this.Title;
    }

    @JsonProperty("Title")
    public void setTitle(String Title) {
        this.Title = Title;
    }

    // DeveloperName
    private String DeveloperName;

    @JsonProperty("DeveloperName")
    public String getDeveloperName() {
        return this.DeveloperName;
    }

    @JsonProperty("DeveloperName")
    public void setDeveloperName(String DeveloperName) {
        this.DeveloperName = DeveloperName;
    }

    // NamespacePrefix
    private String NamespacePrefix;

    @JsonProperty("NamespacePrefix")
    public String getNamespacePrefix() {
        return this.NamespacePrefix;
    }

    @JsonProperty("NamespacePrefix")
    public void setNamespacePrefix(String NamespacePrefix) {
        this.NamespacePrefix = NamespacePrefix;
    }

    // Description
    private String Description;

    @JsonProperty("Description")
    public String getDescription() {
        return this.Description;
    }

    @JsonProperty("Description")
    public void setDescription(String Description) {
        this.Description = Description;
    }

    // LeftSize
    @XStreamConverter(PicklistEnumConverter.class)
    private Dashboard_LeftSizeEnum LeftSize;

    @JsonProperty("LeftSize")
    public Dashboard_LeftSizeEnum getLeftSize() {
        return this.LeftSize;
    }

    @JsonProperty("LeftSize")
    public void setLeftSize(Dashboard_LeftSizeEnum LeftSize) {
        this.LeftSize = LeftSize;
    }

    // MiddleSize
    @XStreamConverter(PicklistEnumConverter.class)
    private Dashboard_MiddleSizeEnum MiddleSize;

    @JsonProperty("MiddleSize")
    public Dashboard_MiddleSizeEnum getMiddleSize() {
        return this.MiddleSize;
    }

    @JsonProperty("MiddleSize")
    public void setMiddleSize(Dashboard_MiddleSizeEnum MiddleSize) {
        this.MiddleSize = MiddleSize;
    }

    // RightSize
    @XStreamConverter(PicklistEnumConverter.class)
    private Dashboard_RightSizeEnum RightSize;

    @JsonProperty("RightSize")
    public Dashboard_RightSizeEnum getRightSize() {
        return this.RightSize;
    }

    @JsonProperty("RightSize")
    public void setRightSize(Dashboard_RightSizeEnum RightSize) {
        this.RightSize = RightSize;
    }

    // RunningUserId
    private String RunningUserId;

    @JsonProperty("RunningUserId")
    public String getRunningUserId() {
        return this.RunningUserId;
    }

    @JsonProperty("RunningUserId")
    public void setRunningUserId(String RunningUserId) {
        this.RunningUserId = RunningUserId;
    }

    // TitleColor
    private Integer TitleColor;

    @JsonProperty("TitleColor")
    public Integer getTitleColor() {
        return this.TitleColor;
    }

    @JsonProperty("TitleColor")
    public void setTitleColor(Integer TitleColor) {
        this.TitleColor = TitleColor;
    }

    // TitleSize
    private Integer TitleSize;

    @JsonProperty("TitleSize")
    public Integer getTitleSize() {
        return this.TitleSize;
    }

    @JsonProperty("TitleSize")
    public void setTitleSize(Integer TitleSize) {
        this.TitleSize = TitleSize;
    }

    // TextColor
    private Integer TextColor;

    @JsonProperty("TextColor")
    public Integer getTextColor() {
        return this.TextColor;
    }

    @JsonProperty("TextColor")
    public void setTextColor(Integer TextColor) {
        this.TextColor = TextColor;
    }

    // BackgroundStart
    private Integer BackgroundStart;

    @JsonProperty("BackgroundStart")
    public Integer getBackgroundStart() {
        return this.BackgroundStart;
    }

    @JsonProperty("BackgroundStart")
    public void setBackgroundStart(Integer BackgroundStart) {
        this.BackgroundStart = BackgroundStart;
    }

    // BackgroundEnd
    private Integer BackgroundEnd;

    @JsonProperty("BackgroundEnd")
    public Integer getBackgroundEnd() {
        return this.BackgroundEnd;
    }

    @JsonProperty("BackgroundEnd")
    public void setBackgroundEnd(Integer BackgroundEnd) {
        this.BackgroundEnd = BackgroundEnd;
    }

    // BackgroundDirection
    @XStreamConverter(PicklistEnumConverter.class)
    private Dashboard_BackgroundDirectionEnum BackgroundDirection;

    @JsonProperty("BackgroundDirection")
    public Dashboard_BackgroundDirectionEnum getBackgroundDirection() {
        return this.BackgroundDirection;
    }

    @JsonProperty("BackgroundDirection")
    public void setBackgroundDirection(Dashboard_BackgroundDirectionEnum BackgroundDirection) {
        this.BackgroundDirection = BackgroundDirection;
    }

    // Type
    @XStreamConverter(PicklistEnumConverter.class)
    private Dashboard_TypeEnum Type;

    @JsonProperty("Type")
    public Dashboard_TypeEnum getType() {
        return this.Type;
    }

    @JsonProperty("Type")
    public void setType(Dashboard_TypeEnum Type) {
        this.Type = Type;
    }

    // DashboardResultRefreshedDate
    private String DashboardResultRefreshedDate;

    @JsonProperty("DashboardResultRefreshedDate")
    public String getDashboardResultRefreshedDate() {
        return this.DashboardResultRefreshedDate;
    }

    @JsonProperty("DashboardResultRefreshedDate")
    public void setDashboardResultRefreshedDate(String DashboardResultRefreshedDate) {
        this.DashboardResultRefreshedDate = DashboardResultRefreshedDate;
    }

    // DashboardResultRunningUser
    private String DashboardResultRunningUser;

    @JsonProperty("DashboardResultRunningUser")
    public String getDashboardResultRunningUser() {
        return this.DashboardResultRunningUser;
    }

    @JsonProperty("DashboardResultRunningUser")
    public void setDashboardResultRunningUser(String DashboardResultRunningUser) {
        this.DashboardResultRunningUser = DashboardResultRunningUser;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Dashboard ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("FolderId", "Folder ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("Title", "Title", "string", "xsd:string", 80, false, false, true, false, false, false, true);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("DeveloperName", "Dashboard Unique Name", "string", "xsd:string", 80, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("NamespacePrefix", "Namespace Prefix", "string", "xsd:string", 15, false, true, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("Description", "Description", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("LeftSize", "Left Size", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("MiddleSize", "Middle Size", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("RightSize", "Right Size", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField15);
        final SObjectField sObjectField16 = createField("RunningUserId", "Running User ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField16);
        final SObjectField sObjectField17 = createField("TitleColor", "Title Color", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField17);
        final SObjectField sObjectField18 = createField("TitleSize", "Title Size", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField18);
        final SObjectField sObjectField19 = createField("TextColor", "Text Color", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField19);
        final SObjectField sObjectField20 = createField("BackgroundStart", "Starting Color", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField20);
        final SObjectField sObjectField21 = createField("BackgroundEnd", "Ending Color", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField21);
        final SObjectField sObjectField22 = createField("BackgroundDirection", "Background Fade Direction", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField22);
        final SObjectField sObjectField23 = createField("Type", "Dashboard Running User", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField23);
        final SObjectField sObjectField24 = createField("LastViewedDate", "Last Viewed Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField24);
        final SObjectField sObjectField25 = createField("LastReferencedDate", "Last Referenced Date", "datetime", "xsd:dateTime", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField25);
        final SObjectField sObjectField26 = createField("DashboardResultRefreshedDate", "Last refreshed for this user", "string", "xsd:string", 256, false, true, false, false, false, false, false);
        fields1.add(sObjectField26);
        final SObjectField sObjectField27 = createField("DashboardResultRunningUser", "Running as", "string", "xsd:string", 256, false, true, false, false, false, false, false);
        fields1.add(sObjectField27);

        description.setLabelPlural("Dashboards");
        description.setLabel("Dashboard");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/Dashboard/describe");
        sObjectDescriptionUrls1.setLayouts("/services/data/v34.0/sobjects/Dashboard/describe/layouts");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/Dashboard");
        sObjectDescriptionUrls1.setUiEditTemplate("https://na57.salesforce.com/{ID}/e");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/Dashboard/{ID}");
        sObjectDescriptionUrls1.setCompactLayouts("/services/data/v34.0/sobjects/Dashboard/describe/compactLayouts");
        sObjectDescriptionUrls1.setUiNewRecord("https://na57.salesforce.com/01Z/e");
        sObjectDescriptionUrls1.setUiDetailTemplate("https://na57.salesforce.com/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("Dashboard");

        return description;
    }
}
