/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject EmailDomainKey
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("EmailDomainKey")
public class EmailDomainKey extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // Selector
    private String Selector;

    @JsonProperty("Selector")
    public String getSelector() {
        return this.Selector;
    }

    @JsonProperty("Selector")
    public void setSelector(String Selector) {
        this.Selector = Selector;
    }

    // Domain
    private String Domain;

    @JsonProperty("Domain")
    public String getDomain() {
        return this.Domain;
    }

    @JsonProperty("Domain")
    public void setDomain(String Domain) {
        this.Domain = Domain;
    }

    // DomainMatch
    @XStreamConverter(PicklistEnumConverter.class)
    private EmailDomainKey_DomainMatchEnum DomainMatch;

    @JsonProperty("DomainMatch")
    public EmailDomainKey_DomainMatchEnum getDomainMatch() {
        return this.DomainMatch;
    }

    @JsonProperty("DomainMatch")
    public void setDomainMatch(EmailDomainKey_DomainMatchEnum DomainMatch) {
        this.DomainMatch = DomainMatch;
    }

    // IsActive
    private Boolean IsActive;

    @JsonProperty("IsActive")
    public Boolean getIsActive() {
        return this.IsActive;
    }

    @JsonProperty("IsActive")
    public void setIsActive(Boolean IsActive) {
        this.IsActive = IsActive;
    }

    // PublicKey
    private String PublicKey;

    @JsonProperty("PublicKey")
    public String getPublicKey() {
        return this.PublicKey;
    }

    @JsonProperty("PublicKey")
    public void setPublicKey(String PublicKey) {
        this.PublicKey = PublicKey;
    }

    // PrivateKey
    private String PrivateKey;

    @JsonProperty("PrivateKey")
    public String getPrivateKey() {
        return this.PrivateKey;
    }

    @JsonProperty("PrivateKey")
    public void setPrivateKey(String PrivateKey) {
        this.PrivateKey = PrivateKey;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Email Domain Key ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("Selector", "Selector", "string", "xsd:string", 63, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("Domain", "Domain", "string", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("DomainMatch", "Domain Match", "picklist", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("IsActive", "Active", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("PublicKey", "Public Key", "textarea", "xsd:string", 32000, false, true, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("PrivateKey", "Private Key", "textarea", "xsd:string", 32000, false, true, false, false, false, false, false);
        fields1.add(sObjectField13);

        description.setLabelPlural("Email Domain Keys");
        description.setLabel("Email Domain Key");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/EmailDomainKey/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/EmailDomainKey");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/EmailDomainKey/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("EmailDomainKey");

        return description;
    }
}
