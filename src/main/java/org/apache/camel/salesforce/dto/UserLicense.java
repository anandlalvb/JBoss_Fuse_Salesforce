/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject UserLicense
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("UserLicense")
public class UserLicense extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // LicenseDefinitionKey
    private String LicenseDefinitionKey;

    @JsonProperty("LicenseDefinitionKey")
    public String getLicenseDefinitionKey() {
        return this.LicenseDefinitionKey;
    }

    @JsonProperty("LicenseDefinitionKey")
    public void setLicenseDefinitionKey(String LicenseDefinitionKey) {
        this.LicenseDefinitionKey = LicenseDefinitionKey;
    }

    // TotalLicenses
    private Integer TotalLicenses;

    @JsonProperty("TotalLicenses")
    public Integer getTotalLicenses() {
        return this.TotalLicenses;
    }

    @JsonProperty("TotalLicenses")
    public void setTotalLicenses(Integer TotalLicenses) {
        this.TotalLicenses = TotalLicenses;
    }

    // Status
    @XStreamConverter(PicklistEnumConverter.class)
    private UserLicense_StatusEnum Status;

    @JsonProperty("Status")
    public UserLicense_StatusEnum getStatus() {
        return this.Status;
    }

    @JsonProperty("Status")
    public void setStatus(UserLicense_StatusEnum Status) {
        this.Status = Status;
    }

    // UsedLicenses
    private Integer UsedLicenses;

    @JsonProperty("UsedLicenses")
    public Integer getUsedLicenses() {
        return this.UsedLicenses;
    }

    @JsonProperty("UsedLicenses")
    public void setUsedLicenses(Integer UsedLicenses) {
        this.UsedLicenses = UsedLicenses;
    }

    // MasterLabel
    private String MasterLabel;

    @JsonProperty("MasterLabel")
    public String getMasterLabel() {
        return this.MasterLabel;
    }

    @JsonProperty("MasterLabel")
    public void setMasterLabel(String MasterLabel) {
        this.MasterLabel = MasterLabel;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "User License ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("LicenseDefinitionKey", "License Def. ID", "string", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("TotalLicenses", "Total Licenses", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("Status", "Status", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("UsedLicenses", "Used Licenses", "int", "xsd:int", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("Name", "Name", "string", "xsd:string", 40, false, false, true, false, false, false, true);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("MasterLabel", "Master Label", "string", "xsd:string", 80, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField10);

        description.setLabelPlural("User Licenses");
        description.setLabel("User License");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/UserLicense/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/UserLicense");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/UserLicense/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("UserLicense");

        return description;
    }
}
