/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject ListViewChartInstance
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("ListViewChartInstance")
public class ListViewChartInstance extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // ExternalId
    private String ExternalId;

    @JsonProperty("ExternalId")
    public String getExternalId() {
        return this.ExternalId;
    }

    @JsonProperty("ExternalId")
    public void setExternalId(String ExternalId) {
        this.ExternalId = ExternalId;
    }

    // ListViewChartId
    private String ListViewChartId;

    @JsonProperty("ListViewChartId")
    public String getListViewChartId() {
        return this.ListViewChartId;
    }

    @JsonProperty("ListViewChartId")
    public void setListViewChartId(String ListViewChartId) {
        this.ListViewChartId = ListViewChartId;
    }

    // Label
    private String Label;

    @JsonProperty("Label")
    public String getLabel() {
        return this.Label;
    }

    @JsonProperty("Label")
    public void setLabel(String Label) {
        this.Label = Label;
    }

    // DeveloperName
    private String DeveloperName;

    @JsonProperty("DeveloperName")
    public String getDeveloperName() {
        return this.DeveloperName;
    }

    @JsonProperty("DeveloperName")
    public void setDeveloperName(String DeveloperName) {
        this.DeveloperName = DeveloperName;
    }

    // SourceEntity
    private String SourceEntity;

    @JsonProperty("SourceEntity")
    public String getSourceEntity() {
        return this.SourceEntity;
    }

    @JsonProperty("SourceEntity")
    public void setSourceEntity(String SourceEntity) {
        this.SourceEntity = SourceEntity;
    }

    // ListViewContextId
    private String ListViewContextId;

    @JsonProperty("ListViewContextId")
    public String getListViewContextId() {
        return this.ListViewContextId;
    }

    @JsonProperty("ListViewContextId")
    public void setListViewContextId(String ListViewContextId) {
        this.ListViewContextId = ListViewContextId;
    }

    // ChartType
    @XStreamConverter(PicklistEnumConverter.class)
    private ListViewChartInstance_ChartTypeEnum ChartType;

    @JsonProperty("ChartType")
    public ListViewChartInstance_ChartTypeEnum getChartType() {
        return this.ChartType;
    }

    @JsonProperty("ChartType")
    public void setChartType(ListViewChartInstance_ChartTypeEnum ChartType) {
        this.ChartType = ChartType;
    }

    // IsLastViewed
    private Boolean IsLastViewed;

    @JsonProperty("IsLastViewed")
    public Boolean getIsLastViewed() {
        return this.IsLastViewed;
    }

    @JsonProperty("IsLastViewed")
    public void setIsLastViewed(Boolean IsLastViewed) {
        this.IsLastViewed = IsLastViewed;
    }

    // DataQuery
    private String DataQuery;

    @JsonProperty("DataQuery")
    public String getDataQuery() {
        return this.DataQuery;
    }

    @JsonProperty("DataQuery")
    public void setDataQuery(String DataQuery) {
        this.DataQuery = DataQuery;
    }

    // IsEditable
    private Boolean IsEditable;

    @JsonProperty("IsEditable")
    public Boolean getIsEditable() {
        return this.IsEditable;
    }

    @JsonProperty("IsEditable")
    public void setIsEditable(Boolean IsEditable) {
        this.IsEditable = IsEditable;
    }

    // IsDeletable
    private Boolean IsDeletable;

    @JsonProperty("IsDeletable")
    public Boolean getIsDeletable() {
        return this.IsDeletable;
    }

    @JsonProperty("IsDeletable")
    public void setIsDeletable(Boolean IsDeletable) {
        this.IsDeletable = IsDeletable;
    }

    // GroupingField
    private String GroupingField;

    @JsonProperty("GroupingField")
    public String getGroupingField() {
        return this.GroupingField;
    }

    @JsonProperty("GroupingField")
    public void setGroupingField(String GroupingField) {
        this.GroupingField = GroupingField;
    }

    // AggregateField
    private String AggregateField;

    @JsonProperty("AggregateField")
    public String getAggregateField() {
        return this.AggregateField;
    }

    @JsonProperty("AggregateField")
    public void setAggregateField(String AggregateField) {
        this.AggregateField = AggregateField;
    }

    // AggregateType
    @XStreamConverter(PicklistEnumConverter.class)
    private ListViewChartInstance_AggregateTypeEnum AggregateType;

    @JsonProperty("AggregateType")
    public ListViewChartInstance_AggregateTypeEnum getAggregateType() {
        return this.AggregateType;
    }

    @JsonProperty("AggregateType")
    public void setAggregateType(ListViewChartInstance_AggregateTypeEnum AggregateType) {
        this.AggregateType = AggregateType;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "List View Chart Instance ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("ExternalId", "ListView Chart Instance ID", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("ListViewChartId", "List View Chart ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("Label", "Label", "string", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("DeveloperName", "API Name", "string", "xsd:string", 80, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("SourceEntity", "Entity", "string", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("ListViewContextId", "List View ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("ChartType", "TODO, use alias", "picklist", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("IsLastViewed", "Last Viewed", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("DataQuery", "SOQL Query for Chart Data", "textarea", "xsd:string", 1333, false, true, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("IsEditable", "Editable", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("IsDeletable", "Deletable", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("GroupingField", "Grouping Field", "string", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("AggregateField", "Aggregate Field", "string", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("AggregateType", "Aggregate Type", "picklist", "xsd:string", 255, false, false, false, false, false, false, false);
        fields1.add(sObjectField15);

        description.setLabelPlural("List View Chart Instances");
        description.setLabel("List View Chart Instance");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/ListViewChartInstance/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/ListViewChartInstance");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/ListViewChartInstance/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("ListViewChartInstance");

        return description;
    }
}
