/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import javax.annotation.Generated;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Salesforce Enumeration DTO for picklist Field
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
public enum AssetHistory_FieldEnum {

    // Account
    ACCOUNT("Account"),
    // AssetLevel
    ASSETLEVEL("AssetLevel"),
    // AssetProvidedBy
    ASSETPROVIDEDBY("AssetProvidedBy"),
    // AssetServicedBy
    ASSETSERVICEDBY("AssetServicedBy"),
    // Contact
    CONTACT("Contact"),
    // Description
    DESCRIPTION("Description"),
    // InstallDate
    INSTALLDATE("InstallDate"),
    // IsCompetitorProduct
    ISCOMPETITORPRODUCT("IsCompetitorProduct"),
    // IsInternal
    ISINTERNAL("IsInternal"),
    // Name
    NAME("Name"),
    // Owner
    OWNER("Owner"),
    // Parent
    PARENT("Parent"),
    // Price
    PRICE("Price"),
    // Product2
    PRODUCT2("Product2"),
    // PurchaseDate
    PURCHASEDATE("PurchaseDate"),
    // Quantity
    QUANTITY("Quantity"),
    // RootAsset
    ROOTASSET("RootAsset"),
    // SerialNumber
    SERIALNUMBER("SerialNumber"),
    // Status
    STATUS("Status"),
    // UsageEndDate
    USAGEENDDATE("UsageEndDate"),
    // created
    CREATED("created"),
    // feedEvent
    FEEDEVENT("feedEvent"),
    // locked
    LOCKED("locked"),
    // ownerAccepted
    OWNERACCEPTED("ownerAccepted"),
    // ownerAssignment
    OWNERASSIGNMENT("ownerAssignment"),
    // unlocked
    UNLOCKED("unlocked");

    final String value;

    private AssetHistory_FieldEnum(String value) {
        this.value = value;
    }

    @JsonValue
    public String value() {
        return this.value;
    }

    @JsonCreator
    public static AssetHistory_FieldEnum fromValue(String value) {
        for (AssetHistory_FieldEnum e : AssetHistory_FieldEnum.values()) {
            if (e.value.equals(value)) {
                return e;
            }
        }
        throw new IllegalArgumentException(value);
    }

}
