/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject UserRecordAccess
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("UserRecordAccess")
public class UserRecordAccess extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // UserId
    private String UserId;

    @JsonProperty("UserId")
    public String getUserId() {
        return this.UserId;
    }

    @JsonProperty("UserId")
    public void setUserId(String UserId) {
        this.UserId = UserId;
    }

    // RecordId
    @XStreamConverter(PicklistEnumConverter.class)
    private UserRecordAccess_RecordIdEnum RecordId;

    @JsonProperty("RecordId")
    public UserRecordAccess_RecordIdEnum getRecordId() {
        return this.RecordId;
    }

    @JsonProperty("RecordId")
    public void setRecordId(UserRecordAccess_RecordIdEnum RecordId) {
        this.RecordId = RecordId;
    }

    // HasReadAccess
    private Boolean HasReadAccess;

    @JsonProperty("HasReadAccess")
    public Boolean getHasReadAccess() {
        return this.HasReadAccess;
    }

    @JsonProperty("HasReadAccess")
    public void setHasReadAccess(Boolean HasReadAccess) {
        this.HasReadAccess = HasReadAccess;
    }

    // HasEditAccess
    private Boolean HasEditAccess;

    @JsonProperty("HasEditAccess")
    public Boolean getHasEditAccess() {
        return this.HasEditAccess;
    }

    @JsonProperty("HasEditAccess")
    public void setHasEditAccess(Boolean HasEditAccess) {
        this.HasEditAccess = HasEditAccess;
    }

    // HasDeleteAccess
    private Boolean HasDeleteAccess;

    @JsonProperty("HasDeleteAccess")
    public Boolean getHasDeleteAccess() {
        return this.HasDeleteAccess;
    }

    @JsonProperty("HasDeleteAccess")
    public void setHasDeleteAccess(Boolean HasDeleteAccess) {
        this.HasDeleteAccess = HasDeleteAccess;
    }

    // HasTransferAccess
    private Boolean HasTransferAccess;

    @JsonProperty("HasTransferAccess")
    public Boolean getHasTransferAccess() {
        return this.HasTransferAccess;
    }

    @JsonProperty("HasTransferAccess")
    public void setHasTransferAccess(Boolean HasTransferAccess) {
        this.HasTransferAccess = HasTransferAccess;
    }

    // HasAllAccess
    private Boolean HasAllAccess;

    @JsonProperty("HasAllAccess")
    public Boolean getHasAllAccess() {
        return this.HasAllAccess;
    }

    @JsonProperty("HasAllAccess")
    public void setHasAllAccess(Boolean HasAllAccess) {
        this.HasAllAccess = HasAllAccess;
    }

    // MaxAccessLevel
    @XStreamConverter(PicklistEnumConverter.class)
    private UserRecordAccess_MaxAccessLevelEnum MaxAccessLevel;

    @JsonProperty("MaxAccessLevel")
    public UserRecordAccess_MaxAccessLevelEnum getMaxAccessLevel() {
        return this.MaxAccessLevel;
    }

    @JsonProperty("MaxAccessLevel")
    public void setMaxAccessLevel(UserRecordAccess_MaxAccessLevelEnum MaxAccessLevel) {
        this.MaxAccessLevel = MaxAccessLevel;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "User Record Access ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("UserId", "User ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("RecordId", "Record ID", "picklist", "xsd:string", 40, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("HasReadAccess", "Has Read Access", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("HasEditAccess", "Has Edit Access", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("HasDeleteAccess", "Has Delete Access", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("HasTransferAccess", "Has Transfer Access", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("HasAllAccess", "Has All Access", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("MaxAccessLevel", "Maximum Access Level", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField9);

        description.setLabelPlural("User Record Access");
        description.setLabel("User Record Access");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/UserRecordAccess/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/UserRecordAccess");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/UserRecordAccess/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("UserRecordAccess");

        return description;
    }
}
