/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;

import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject IdeaComment
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("IdeaComment")
public class IdeaComment extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // IdeaId
    private String IdeaId;

    @JsonProperty("IdeaId")
    public String getIdeaId() {
        return this.IdeaId;
    }

    @JsonProperty("IdeaId")
    public void setIdeaId(String IdeaId) {
        this.IdeaId = IdeaId;
    }

    // CommunityId
    private String CommunityId;

    @JsonProperty("CommunityId")
    public String getCommunityId() {
        return this.CommunityId;
    }

    @JsonProperty("CommunityId")
    public void setCommunityId(String CommunityId) {
        this.CommunityId = CommunityId;
    }

    // CommentBody
    private String CommentBody;

    @JsonProperty("CommentBody")
    public String getCommentBody() {
        return this.CommentBody;
    }

    @JsonProperty("CommentBody")
    public void setCommentBody(String CommentBody) {
        this.CommentBody = CommentBody;
    }

    // IsHtml
    private Boolean IsHtml;

    @JsonProperty("IsHtml")
    public Boolean getIsHtml() {
        return this.IsHtml;
    }

    @JsonProperty("IsHtml")
    public void setIsHtml(Boolean IsHtml) {
        this.IsHtml = IsHtml;
    }

    // CreatorFullPhotoUrl
    private String CreatorFullPhotoUrl;

    @JsonProperty("CreatorFullPhotoUrl")
    public String getCreatorFullPhotoUrl() {
        return this.CreatorFullPhotoUrl;
    }

    @JsonProperty("CreatorFullPhotoUrl")
    public void setCreatorFullPhotoUrl(String CreatorFullPhotoUrl) {
        this.CreatorFullPhotoUrl = CreatorFullPhotoUrl;
    }

    // CreatorSmallPhotoUrl
    private String CreatorSmallPhotoUrl;

    @JsonProperty("CreatorSmallPhotoUrl")
    public String getCreatorSmallPhotoUrl() {
        return this.CreatorSmallPhotoUrl;
    }

    @JsonProperty("CreatorSmallPhotoUrl")
    public void setCreatorSmallPhotoUrl(String CreatorSmallPhotoUrl) {
        this.CreatorSmallPhotoUrl = CreatorSmallPhotoUrl;
    }

    // CreatorName
    private String CreatorName;

    @JsonProperty("CreatorName")
    public String getCreatorName() {
        return this.CreatorName;
    }

    @JsonProperty("CreatorName")
    public void setCreatorName(String CreatorName) {
        this.CreatorName = CreatorName;
    }

    // UpVotes
    private Integer UpVotes;

    @JsonProperty("UpVotes")
    public Integer getUpVotes() {
        return this.UpVotes;
    }

    @JsonProperty("UpVotes")
    public void setUpVotes(Integer UpVotes) {
        this.UpVotes = UpVotes;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Idea Comment ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("IdeaId", "Idea ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("CommunityId", "Zone ID", "reference", "tns:ID", 18, false, true, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("CommentBody", "Comment Body", "textarea", "xsd:string", 4000, false, true, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("IsDeleted", "Deleted", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("IsHtml", "IsHtml", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("CreatorFullPhotoUrl", "Url of Creator's Profile Photo", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("CreatorSmallPhotoUrl", "Url of Creator's Thumbnail Photo", "string", "xsd:string", 255, false, true, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("CreatorName", "Name of Creator", "string", "xsd:string", 121, false, true, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("UpVotes", "Up Votes", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField13);

        description.setLabelPlural("Idea Comments");
        description.setLabel("Idea Comment");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/IdeaComment/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/IdeaComment");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/IdeaComment/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("IdeaComment");

        return description;
    }
}
