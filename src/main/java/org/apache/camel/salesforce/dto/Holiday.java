/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject Holiday
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("Holiday")
public class Holiday extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // Description
    private String Description;

    @JsonProperty("Description")
    public String getDescription() {
        return this.Description;
    }

    @JsonProperty("Description")
    public void setDescription(String Description) {
        this.Description = Description;
    }

    // IsAllDay
    private Boolean IsAllDay;

    @JsonProperty("IsAllDay")
    public Boolean getIsAllDay() {
        return this.IsAllDay;
    }

    @JsonProperty("IsAllDay")
    public void setIsAllDay(Boolean IsAllDay) {
        this.IsAllDay = IsAllDay;
    }

    // ActivityDate
    private java.time.LocalDate ActivityDate;

    @JsonProperty("ActivityDate")
    public java.time.LocalDate getActivityDate() {
        return this.ActivityDate;
    }

    @JsonProperty("ActivityDate")
    public void setActivityDate(java.time.LocalDate ActivityDate) {
        this.ActivityDate = ActivityDate;
    }

    // StartTimeInMinutes
    private Integer StartTimeInMinutes;

    @JsonProperty("StartTimeInMinutes")
    public Integer getStartTimeInMinutes() {
        return this.StartTimeInMinutes;
    }

    @JsonProperty("StartTimeInMinutes")
    public void setStartTimeInMinutes(Integer StartTimeInMinutes) {
        this.StartTimeInMinutes = StartTimeInMinutes;
    }

    // EndTimeInMinutes
    private Integer EndTimeInMinutes;

    @JsonProperty("EndTimeInMinutes")
    public Integer getEndTimeInMinutes() {
        return this.EndTimeInMinutes;
    }

    @JsonProperty("EndTimeInMinutes")
    public void setEndTimeInMinutes(Integer EndTimeInMinutes) {
        this.EndTimeInMinutes = EndTimeInMinutes;
    }

    // IsRecurrence
    private Boolean IsRecurrence;

    @JsonProperty("IsRecurrence")
    public Boolean getIsRecurrence() {
        return this.IsRecurrence;
    }

    @JsonProperty("IsRecurrence")
    public void setIsRecurrence(Boolean IsRecurrence) {
        this.IsRecurrence = IsRecurrence;
    }

    // RecurrenceStartDate
    private java.time.LocalDate RecurrenceStartDate;

    @JsonProperty("RecurrenceStartDate")
    public java.time.LocalDate getRecurrenceStartDate() {
        return this.RecurrenceStartDate;
    }

    @JsonProperty("RecurrenceStartDate")
    public void setRecurrenceStartDate(java.time.LocalDate RecurrenceStartDate) {
        this.RecurrenceStartDate = RecurrenceStartDate;
    }

    // RecurrenceEndDateOnly
    private java.time.LocalDate RecurrenceEndDateOnly;

    @JsonProperty("RecurrenceEndDateOnly")
    public java.time.LocalDate getRecurrenceEndDateOnly() {
        return this.RecurrenceEndDateOnly;
    }

    @JsonProperty("RecurrenceEndDateOnly")
    public void setRecurrenceEndDateOnly(java.time.LocalDate RecurrenceEndDateOnly) {
        this.RecurrenceEndDateOnly = RecurrenceEndDateOnly;
    }

    // RecurrenceType
    @XStreamConverter(PicklistEnumConverter.class)
    private Holiday_RecurrenceTypeEnum RecurrenceType;

    @JsonProperty("RecurrenceType")
    public Holiday_RecurrenceTypeEnum getRecurrenceType() {
        return this.RecurrenceType;
    }

    @JsonProperty("RecurrenceType")
    public void setRecurrenceType(Holiday_RecurrenceTypeEnum RecurrenceType) {
        this.RecurrenceType = RecurrenceType;
    }

    // RecurrenceInterval
    private Integer RecurrenceInterval;

    @JsonProperty("RecurrenceInterval")
    public Integer getRecurrenceInterval() {
        return this.RecurrenceInterval;
    }

    @JsonProperty("RecurrenceInterval")
    public void setRecurrenceInterval(Integer RecurrenceInterval) {
        this.RecurrenceInterval = RecurrenceInterval;
    }

    // RecurrenceDayOfWeekMask
    private Integer RecurrenceDayOfWeekMask;

    @JsonProperty("RecurrenceDayOfWeekMask")
    public Integer getRecurrenceDayOfWeekMask() {
        return this.RecurrenceDayOfWeekMask;
    }

    @JsonProperty("RecurrenceDayOfWeekMask")
    public void setRecurrenceDayOfWeekMask(Integer RecurrenceDayOfWeekMask) {
        this.RecurrenceDayOfWeekMask = RecurrenceDayOfWeekMask;
    }

    // RecurrenceDayOfMonth
    private Integer RecurrenceDayOfMonth;

    @JsonProperty("RecurrenceDayOfMonth")
    public Integer getRecurrenceDayOfMonth() {
        return this.RecurrenceDayOfMonth;
    }

    @JsonProperty("RecurrenceDayOfMonth")
    public void setRecurrenceDayOfMonth(Integer RecurrenceDayOfMonth) {
        this.RecurrenceDayOfMonth = RecurrenceDayOfMonth;
    }

    // RecurrenceInstance
    @XStreamConverter(PicklistEnumConverter.class)
    private Holiday_RecurrenceInstanceEnum RecurrenceInstance;

    @JsonProperty("RecurrenceInstance")
    public Holiday_RecurrenceInstanceEnum getRecurrenceInstance() {
        return this.RecurrenceInstance;
    }

    @JsonProperty("RecurrenceInstance")
    public void setRecurrenceInstance(Holiday_RecurrenceInstanceEnum RecurrenceInstance) {
        this.RecurrenceInstance = RecurrenceInstance;
    }

    // RecurrenceMonthOfYear
    @XStreamConverter(PicklistEnumConverter.class)
    private Holiday_RecurrenceMonthOfYearEnum RecurrenceMonthOfYear;

    @JsonProperty("RecurrenceMonthOfYear")
    public Holiday_RecurrenceMonthOfYearEnum getRecurrenceMonthOfYear() {
        return this.RecurrenceMonthOfYear;
    }

    @JsonProperty("RecurrenceMonthOfYear")
    public void setRecurrenceMonthOfYear(Holiday_RecurrenceMonthOfYearEnum RecurrenceMonthOfYear) {
        this.RecurrenceMonthOfYear = RecurrenceMonthOfYear;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Holiday ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("Name", "Holiday Name", "string", "xsd:string", 80, false, false, true, false, false, false, true);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("Description", "Description", "string", "xsd:string", 100, false, true, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("IsAllDay", "All Day", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("ActivityDate", "Holiday Date", "date", "xsd:date", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("StartTimeInMinutes", "Start Time In Minutes From Midnight", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("EndTimeInMinutes", "End Time In Minutes From Midnight", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("IsRecurrence", "Recurring Holiday", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("RecurrenceStartDate", "Recurrence Start", "date", "xsd:date", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("RecurrenceEndDateOnly", "Recurrence End", "date", "xsd:date", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField15);
        final SObjectField sObjectField16 = createField("RecurrenceType", "Recurrence Type", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField16);
        final SObjectField sObjectField17 = createField("RecurrenceInterval", "Recurrence Interval", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField17);
        final SObjectField sObjectField18 = createField("RecurrenceDayOfWeekMask", "Recurrence Day of Week Mask", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField18);
        final SObjectField sObjectField19 = createField("RecurrenceDayOfMonth", "Recurrence Day of Month", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField19);
        final SObjectField sObjectField20 = createField("RecurrenceInstance", "Recurrence Instance", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField20);
        final SObjectField sObjectField21 = createField("RecurrenceMonthOfYear", "Recurrence Month of Year", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField21);

        description.setLabelPlural("Holidays");
        description.setLabel("Holiday");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/Holiday/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/Holiday");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/Holiday/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("Holiday");

        return description;
    }
}
