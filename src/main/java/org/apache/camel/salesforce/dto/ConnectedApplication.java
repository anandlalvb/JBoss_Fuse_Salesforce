/*
 * Salesforce DTO generated by camel-salesforce-maven-plugin
 * Generated on: Thu Sep 06 16:51:28 IST 2018
 */
package org.apache.camel.salesforce.dto;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Generated;

import com.thoughtworks.xstream.annotations.XStreamAlias;
import com.thoughtworks.xstream.annotations.XStreamConverter;

import org.apache.camel.component.salesforce.api.PicklistEnumConverter;
import org.apache.camel.component.salesforce.api.dto.AbstractDescribedSObjectBase;
import org.apache.camel.component.salesforce.api.dto.ChildRelationShip;
import org.apache.camel.component.salesforce.api.dto.InfoUrls;
import org.apache.camel.component.salesforce.api.dto.NamedLayoutInfo;
import org.apache.camel.component.salesforce.api.dto.RecordTypeInfo;
import org.apache.camel.component.salesforce.api.dto.SObjectDescription;
import org.apache.camel.component.salesforce.api.dto.SObjectDescriptionUrls;
import org.apache.camel.component.salesforce.api.dto.SObjectField;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Salesforce DTO for SObject ConnectedApplication
 */
@Generated("org.apache.camel.maven.CamelSalesforceMojo")
@XStreamAlias("ConnectedApplication")
public class ConnectedApplication extends AbstractDescribedSObjectBase {

    private static final SObjectDescription DESCRIPTION = createSObjectDescription();

    // OptionsAllowAdminApprovedUsersOnly
    private Boolean OptionsAllowAdminApprovedUsersOnly;

    @JsonProperty("OptionsAllowAdminApprovedUsersOnly")
    public Boolean getOptionsAllowAdminApprovedUsersOnly() {
        return this.OptionsAllowAdminApprovedUsersOnly;
    }

    @JsonProperty("OptionsAllowAdminApprovedUsersOnly")
    public void setOptionsAllowAdminApprovedUsersOnly(Boolean OptionsAllowAdminApprovedUsersOnly) {
        this.OptionsAllowAdminApprovedUsersOnly = OptionsAllowAdminApprovedUsersOnly;
    }

    // OptionsRefreshTokenValidityMetric
    private Boolean OptionsRefreshTokenValidityMetric;

    @JsonProperty("OptionsRefreshTokenValidityMetric")
    public Boolean getOptionsRefreshTokenValidityMetric() {
        return this.OptionsRefreshTokenValidityMetric;
    }

    @JsonProperty("OptionsRefreshTokenValidityMetric")
    public void setOptionsRefreshTokenValidityMetric(Boolean OptionsRefreshTokenValidityMetric) {
        this.OptionsRefreshTokenValidityMetric = OptionsRefreshTokenValidityMetric;
    }

    // OptionsHasSessionLevelPolicy
    private Boolean OptionsHasSessionLevelPolicy;

    @JsonProperty("OptionsHasSessionLevelPolicy")
    public Boolean getOptionsHasSessionLevelPolicy() {
        return this.OptionsHasSessionLevelPolicy;
    }

    @JsonProperty("OptionsHasSessionLevelPolicy")
    public void setOptionsHasSessionLevelPolicy(Boolean OptionsHasSessionLevelPolicy) {
        this.OptionsHasSessionLevelPolicy = OptionsHasSessionLevelPolicy;
    }

    // MobileSessionTimeout
    @XStreamConverter(PicklistEnumConverter.class)
    private ConnectedApplication_MobileSessionTimeoutEnum MobileSessionTimeout;

    @JsonProperty("MobileSessionTimeout")
    public ConnectedApplication_MobileSessionTimeoutEnum getMobileSessionTimeout() {
        return this.MobileSessionTimeout;
    }

    @JsonProperty("MobileSessionTimeout")
    public void setMobileSessionTimeout(ConnectedApplication_MobileSessionTimeoutEnum MobileSessionTimeout) {
        this.MobileSessionTimeout = MobileSessionTimeout;
    }

    // PinLength
    @XStreamConverter(PicklistEnumConverter.class)
    private ConnectedApplication_PinLengthEnum PinLength;

    @JsonProperty("PinLength")
    public ConnectedApplication_PinLengthEnum getPinLength() {
        return this.PinLength;
    }

    @JsonProperty("PinLength")
    public void setPinLength(ConnectedApplication_PinLengthEnum PinLength) {
        this.PinLength = PinLength;
    }

    // StartUrl
    private String StartUrl;

    @JsonProperty("StartUrl")
    public String getStartUrl() {
        return this.StartUrl;
    }

    @JsonProperty("StartUrl")
    public void setStartUrl(String StartUrl) {
        this.StartUrl = StartUrl;
    }

    // MobileStartUrl
    private String MobileStartUrl;

    @JsonProperty("MobileStartUrl")
    public String getMobileStartUrl() {
        return this.MobileStartUrl;
    }

    @JsonProperty("MobileStartUrl")
    public void setMobileStartUrl(String MobileStartUrl) {
        this.MobileStartUrl = MobileStartUrl;
    }

    // RefreshTokenValidityPeriod
    private Integer RefreshTokenValidityPeriod;

    @JsonProperty("RefreshTokenValidityPeriod")
    public Integer getRefreshTokenValidityPeriod() {
        return this.RefreshTokenValidityPeriod;
    }

    @JsonProperty("RefreshTokenValidityPeriod")
    public void setRefreshTokenValidityPeriod(Integer RefreshTokenValidityPeriod) {
        this.RefreshTokenValidityPeriod = RefreshTokenValidityPeriod;
    }


    @Override
    public final SObjectDescription description() {
        return DESCRIPTION;
    }

    private static SObjectDescription createSObjectDescription() {
        final SObjectDescription description = new SObjectDescription();



        final List<SObjectField> fields1 = new ArrayList<>();
        description.setFields(fields1);

        final SObjectField sObjectField1 = createField("Id", "Connected App ID", "id", "tns:ID", 18, false, false, false, false, false, false, true);
        fields1.add(sObjectField1);
        final SObjectField sObjectField2 = createField("Name", "Connected App Name", "string", "xsd:string", 80, false, false, true, false, false, false, true);
        fields1.add(sObjectField2);
        final SObjectField sObjectField3 = createField("CreatedDate", "Created Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField3);
        final SObjectField sObjectField4 = createField("CreatedById", "Created By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField4);
        final SObjectField sObjectField5 = createField("LastModifiedDate", "Last Modified Date", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField5);
        final SObjectField sObjectField6 = createField("LastModifiedById", "Last Modified By ID", "reference", "tns:ID", 18, false, false, false, false, false, false, false);
        fields1.add(sObjectField6);
        final SObjectField sObjectField7 = createField("SystemModstamp", "System Modstamp", "datetime", "xsd:dateTime", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField7);
        final SObjectField sObjectField8 = createField("OptionsAllowAdminApprovedUsersOnly", "AllowAdminApprovedUsersOnly", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField8);
        final SObjectField sObjectField9 = createField("OptionsRefreshTokenValidityMetric", "RefreshTokenValidityMetric", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField9);
        final SObjectField sObjectField10 = createField("OptionsHasSessionLevelPolicy", "HasSessionLevelPolicy", "boolean", "xsd:boolean", 0, false, false, false, false, false, false, false);
        fields1.add(sObjectField10);
        final SObjectField sObjectField11 = createField("MobileSessionTimeout", "Require PIN after:", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField11);
        final SObjectField sObjectField12 = createField("PinLength", "Pin Length", "picklist", "xsd:string", 40, false, true, false, false, false, false, false);
        fields1.add(sObjectField12);
        final SObjectField sObjectField13 = createField("StartUrl", "Start URL", "url", "xsd:string", 2400, false, true, false, false, false, false, false);
        fields1.add(sObjectField13);
        final SObjectField sObjectField14 = createField("MobileStartUrl", "Mobile Start URL", "url", "xsd:string", 2400, false, true, false, false, false, false, false);
        fields1.add(sObjectField14);
        final SObjectField sObjectField15 = createField("RefreshTokenValidityPeriod", "Refresh Token Policy:", "int", "xsd:int", 0, false, true, false, false, false, false, false);
        fields1.add(sObjectField15);

        description.setLabelPlural("Connected Apps");
        description.setLabel("Connected App");

        final SObjectDescriptionUrls sObjectDescriptionUrls1 = new SObjectDescriptionUrls();
        sObjectDescriptionUrls1.setDescribe("/services/data/v34.0/sobjects/ConnectedApplication/describe");
        sObjectDescriptionUrls1.setSobject("/services/data/v34.0/sobjects/ConnectedApplication");
        sObjectDescriptionUrls1.setRowTemplate("/services/data/v34.0/sobjects/ConnectedApplication/{ID}");
        description.setUrls(sObjectDescriptionUrls1);
        description.setName("ConnectedApplication");

        return description;
    }
}
